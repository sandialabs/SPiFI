/**
 * SPiFI_test_ParallelJobLauncher_dry_run.jenkinsfile
 *
 * Test the pipeline launcher can run jobs in dry-run mode.
 *
 */

/**
 * Configure job properties
 *
 * - Keep up to 30 entries in history for up to 90 days.
 * - Run every night at 4:10 AM
 */
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '',
                                      daysToKeepStr: '90',       numToKeepStr: '30')),
            pipelineTriggers([cron('10 4 * * *')])
           ])



node()
{
    @Library('SPiFI@master') _


    stage("Test Dry-Run Launches")
    {
        // Instantiate the job launcher
        def launcher = new gov.sandia.sems.spifi.ParallelJobLauncher(this)

        // Append a job that will exit with SUCCESS status.
        launcher.appendJob(label: "Test SUCCESS Job",
                           job_name: "SPiFI_pipeline_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "SUCCESS")),
                                         (string(name:"SLEEP_TIME", value: "10"))
                                       ],
                           dry_run: true,
                           dry_run_delay: 10,
                           dry_run_status: "SUCCESS"
                          )

        // Append a job that will exit with FAILURE status.
        launcher.appendJob(label: "Test FAILURE Job",
                           job_name: "SPiFI_pipeline_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "FAILURE")),
                                         (string(name:"SLEEP_TIME", value: "10"))
                                       ],
                           dry_run: true,
                           dry_run_delay: 10,
                           dry_run_status: "FAILURE"
                          )

        // Append a job that will exit with UNSTABLE status.
        launcher.appendJob(label: "Test UNSTABLE Job",
                           job_name: "SPiFI_pipeline_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "UNSTABLE")),
                                         (string(name:"SLEEP_TIME", value: "10"))
                                       ],
                           dry_run: true,
                           dry_run_delay: 10,
                           dry_run_status: "UNSTABLE"
                          )

        // Append a job that will exit with ABORTED status.
        launcher.appendJob(label: "Test ABORTED Job",
                           job_name: "SPiFI_pipeline_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "ABORTED")),
                                         (string(name:"SLEEP_TIME", value: "10"))
                                       ],
                           dry_run: true,
                           dry_run_delay: 10,
                           dry_run_status: "ABORTED"
                          )

        // Append a job that will exit with NOT_BUILT status.
        launcher.appendJob(label: "Test NOT_BUILT Job",
                           job_name: "SPiFI_pipeline_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "NOT_BUILT")),
                                         (string(name:"SLEEP_TIME", value: "10"))
                                       ],
                           dry_run: true,
                           dry_run_delay: 10,
                           dry_run_status: "NOT_BUILT"
                          )

        // Print ot the task list
        launcher.printJobList()

        // Launch the jobs
        def results = launcher.launchInParallel()

        // Get the summary of the run
        def lrs = launcher.getLastResultSummary()

        // Print out the results
        println "Results: ${results}"

        // Print out the summary
        println "Summary: ${lrs}"

    }

}

