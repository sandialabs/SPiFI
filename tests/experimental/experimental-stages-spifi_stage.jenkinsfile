#!/usr/bin/groovy
/**
 * Test spifi_stage + visitors
 *
 * Tests out gov.sandia.sems.spifi.experimental.Stages.spifi_stage
 * generic stage prototype.
 *
 */

// Load the SPiFI library
def libspifi = library("SPiFI-DEV@master").gov.sandia.sems.spifi
def spifi_stages = libspifi.experimental.Stages.new()

node()
{
    // Clean the workspace every time.
    cleanWs()


    // Minimal Run, closest to standard "stage" command.
    spifi_stages.spifi_stage(stageName: "Test 1")
    {
        println "\u250C\n" +
                "\u2502 Hello from test 1 body!\n" +
                "\u2514"
    }


    // Skip stage with generic message
    spifi_stages.spifi_stage(stageName: "Test 2",
                             stageCondition: false)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 2 body!\n" +
                "\u2514"
    }


    // Skip stage with Callback
    Closure cbSkipped = {
        println "\u250C\n" +
                "\u2502 Hello from test cbSkipped\n" +
                "\u2514"
    }
    spifi_stages.spifi_stage(stageName: "Test 3",
                             stageCondition: false,
                             callbackStageSkipped: cbSkipped)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 3 body!\n" +
                "\u2514"
    }


    // Skip stage with Callback + CallbackArgs
    Closure cbSkippedWithArgs = { args=[:], wksp=[:] ->
        println "\u2502 Hello from cbSkippedWithArgs\n" +
                "\u2502 - args: ${args}"
    }
    Map cbSkippedArgs = [ "foo": "bar" ]
    spifi_stages.spifi_stage(stageName: "Test 4",
                             stageCondition: false,
                             callbackStageSkipped: cbSkippedWithArgs,
                             callbackStageSkippedArgs: cbSkippedArgs)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 4 body!\n" +
                "\u2514"
    }


    // Execute Stage + callbackPre + callbackPost
    Closure cbPre = {
        println "\u2502 [Test 5] Hello from cbPre"
    }
    Closure cbPost = {
        println "\u2502 [Test 5] Hello from cbPost"
    }
    spifi_stages.spifi_stage(stageName: "Test 5",
                             callbackStagePre: cbPre,
                             callbackStagePost: cbPost)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 5 body!\n" +
                "\u2514"
    }


    // Execute Stage + callbackPre + callbackPost + Args
    Closure cbPreT6 = {
        cbArgs=[:], cbSharedArgs=[:] ->
        println "\u2502 [Test 6] Hello from cbPre\n" +
                "\u2502 - cbArgs      : ${cbArgs}\n" +
                "\u2502 - cbSharedArgs: ${cbSharedArgs}"
        cbSharedArgs["foo"] = "bar"
        println "\u2502 - cbSharedArgs: ${cbSharedArgs}"
    }
    Closure cbPostT6 = {
        cbArgs=[:], cbSharedArgs=[:] ->
        println "\u2502 [Test 6] Hello from cbPost\n" +
                "\u2502 - cbArgs      : ${cbArgs}\n" +
                "\u2502 - cbSharedArgs: ${cbSharedArgs}"

    }
    Map cbSharedArgsT6 = [:]
    Map logDebug = [:]
    spifi_stages.spifi_stage(stageName: "Test 6",
                             callbackStagePre: cbPreT6,
                             callbackStagePost: cbPostT6,
                             callbackSharedArgs: cbSharedArgsT6,
                             logDebug: logDebug)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 6 body!\n" +
                "\u2514"
    }
    println "cbSharedArgsT6: ${cbSharedArgsT6}"
    println "logDebug: ${logDebug}"


    // Execute Stage + callbackPre + callbackPost + Args
    Map cbSharedArgsT7 = [:]
    Map logDebugT7 = [:]
    spifi_stages.spifi_stage(stageName: "Test 7",
                             callbackStagePre: cbPreT6,
                             callbackStagePost: cbPostT6,
                             callbackSharedArgs: cbSharedArgsT7,
                             logDebug: logDebugT7)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 7 body!\n" +
                "\u2502 logDebugT7 = ${cbSharedArgsT7}\n" +    /* Will this 'see' the changes from cbPreT6? */
                "\u2514"
    }
    println "cbSharedArgsT7: ${cbSharedArgsT7}"
    println "logDebug: ${logDebugT7}"

}

