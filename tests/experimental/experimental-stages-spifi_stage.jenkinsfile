#!/usr/bin/groovy
/**
 * Test spifi_stage + visitors
 *
 * Tests out gov.sandia.sems.spifi.experimental.Stages.spifi_stage
 * generic stage prototype.
 *
 */

// Load the SPiFI library
def libspifi = library("SPiFI-DEV@master").gov.sandia.sems.spifi
def spifi_stages = libspifi.experimental.Stages.new()

String node_restriction = "RHEL7 || OS_RHEL7 || RHEL6 || OS_RHEL7 || master"

node(node_restriction)
{
    // Clean the workspace every time.
    cleanWs()

    String stage_name = ""
    Boolean simulate  = false
    Boolean skip      = false

    Map cbSimArgs      = [:]
    Map cbSkippedArgs  = [:]
    Map cbPreArgs      = [:]
    Map cbPostArgs     = [:]
    Map cbBodyPreArgs  = [:]
    Map cbBodyPostArgs = [:]
    Map cbSharedArgs   = [:]
    Map logDebug       = [:]

    Closure cbSim = {
        println "\u250C\n" +
                "\u2502 Hello from test cbSim\n" +
                "\u2514"
    }
    Closure cbSkipped = {
        println "\u250C\n" +
                "\u2502 Hello from test cbSkipped\n" +
                "\u2514"
    }
    Closure cbSkippedWithArgs = { args=[:], wksp=[:] ->
        println "\u250C\n" +
                "\u2502 Hello from cbSkippedWithArgs\n" +
                "\u2502 - args: ${args}\n" +
                "\u2514"
    }
    Closure cbPre = {
        println "\u250C\n" +
                "\u2502 Hello from test cbPre\n" +
                "\u2514"
    }
    Closure cbPost = {
        println "\u250C\n" +
                "\u2502 Hello from test cbPost\n" +
                "\u2514"
    }
    Closure cbBodyPre = {
        println "\u250C\n" +
                "\u2502 Hello from test cbBodyPre\n" +
                "\u2514"
    }
    Closure cbBodyPost = {
        println "\u250C\n" +
                "\u2502 Hello from test cbBodyPost\n" +
                "\u2514"
    }

/*


    // Minimal Run, closest to standard "stage" command.
    spifi_stages.spifi_stage(stageName: "Test 1")
    {
        println "\u250C\n" +
                "\u2502 Hello from test 1 body!\n" +
                "\u2514"
    }


    // Skip stage with generic message
    spifi_stages.spifi_stage(stageName: "Test 2",
                             stageCondition: false)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 2 body!\n" +
                "\u2514"
    }


    // Skip stage with Callback

    spifi_stages.spifi_stage(stageName: "Test 3",
                             stageCondition: false,
                             callbackStageSkipped: cbSkipped)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 3 body!\n" +
                "\u2514"
    }


    // Skip stage with Callback + CallbackArgs
    Map cbSkippedArgs = [ "foo": "bar" ]
    spifi_stages.spifi_stage(stageName: "Test 4",
                             stageCondition: false,
                             callbackStageSkipped: cbSkippedWithArgs,
                             callbackStageSkippedArgs: cbSkippedArgs)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 4 body!\n" +
                "\u2514"
    }


    // Execute Stage + callbackPre + callbackPost

    spifi_stages.spifi_stage(stageName: "Test 5",
                             callbackStagePre: cbPre,
                             callbackStagePost: cbPost)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 5 body!\n" +
                "\u2514"
    }


    // Execute Stage + callbackPre + callbackPost + Args
    Closure cbPreT6 = {
        cbArgs=[:], cbSharedArgs=[:] ->
        println "\u2502 [Test 6] Hello from cbPre\n" +
                "\u2502 - cbArgs      : ${cbArgs}\n" +
                "\u2502 - cbSharedArgs: ${cbSharedArgs}"
        cbSharedArgs["foo"] = "bar"
        println "\u2502 - cbSharedArgs: ${cbSharedArgs}"
    }
    Closure cbPostT6 = {
        cbArgs=[:], cbSharedArgs=[:] ->
        println "\u2502 [Test 6] Hello from cbPost\n" +
                "\u2502 - cbArgs      : ${cbArgs}\n" +
                "\u2502 - cbSharedArgs: ${cbSharedArgs}"

    }
    Map cbSharedArgsT6 = [:]
    Map logDebug = [:]
    spifi_stages.spifi_stage(stageName: "Test 6",
                             callbackStagePre: cbPreT6,
                             callbackStagePost: cbPostT6,
                             callbackSharedArgs: cbSharedArgsT6,
                             logDebug: logDebug)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 6 body!\n" +
                "\u2514"
    }
    println "cbSharedArgsT6: ${cbSharedArgsT6}"
    println "logDebug: ${logDebug}"


    // Execute Stage + callbackPre + callbackPost + Args
    Map cbSharedArgsT7 = [:]
    Map logDebugT7 = [:]
    spifi_stages.spifi_stage(stageName: "Test 7",
                             callbackStagePre: cbPreT6,
                             callbackStagePost: cbPostT6,
                             callbackSharedArgs: cbSharedArgsT7,
                             logDebug: logDebugT7)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 7 body!\n" +
                "\u2502 logDebugT7 = ${cbSharedArgsT7}\n" +    // Will this 'see' the changes from cbPreT6?
                "\u2514"
    }
    println "cbSharedArgsT7: ${cbSharedArgsT7}"
    println "logDebug: ${logDebugT7}"
*/



    // Kitchen Sink! Provide ALL callbacks (not skipped, not simulated)
    stage_name   = "Kitchen Sink [FF]"
    skip         = false
    simulate     = false
    logDebug     = [:]
    cbSharedArgs = [:]
    spifi_stages.spifi_stage(stageName: stage_name,
                             simulate: simulate,
                             skip: skip,
                             callbackStagePre: cbPre,
                             callbackStagePreArgs: cbPreArgs,
                             callbackStageSkipped: cbSkippedWithArgs,
                             callbackStageSkippedArgs: cbSkippedArgs,
                             callbackStageBodyPre: cbBodyPre,
                             callbackStageBodyPreArgs: cbBodyPreArgs,
                             callbackStageBodyPost: cbBodyPost,
                             callbackStageBodyPostArgs: cbBodyPostArgs,
                             callbackStagePost: cbPost,
                             callbackStagePostArgs: cbPostArgs,
                             callbackStageSimulate: cbSim,
                             callbackStageSimulateArgs: cbSimArgs,
                             callbackSharedArgs: cbSharedArgs,
                             logDebug: logDebug)
    {
        println "\u250C\n" +
                "\u2502 Hello from ${stage_name} body!\n" +
                "\u2502 logDebug = ${cbSharedArgs}\n" +
                "\u2514"
    }
    println "\u2502 cbSharedArgs: ${cbSharedArgs}\n" +
            "\u2502 logDebug: ${logDebug}"


    // Kitchen Sink! Provide ALL callbacks (skip, not simulated)
    stage_name   = "Kitchen Sink [TF]"
    skip         = true
    simulate     = false
    logDebug     = [:]
    cbSharedArgs = [:]
    spifi_stages.spifi_stage(stageName: stage_name,
                             simulate: false,
                             skip: skip,
                             callbackStagePre: cbPre,
                             callbackStagePreArgs: cbPreArgs,
                             callbackStageSkipped: cbSkippedWithArgs,
                             callbackStageSkippedArgs: cbSkippedArgs,
                             callbackStageBodyPre: cbBodyPre,
                             callbackStageBodyPreArgs: cbBodyPreArgs,
                             callbackStageBodyPost: cbBodyPost,
                             callbackStageBodyPostArgs: cbBodyPostArgs,
                             callbackStagePost: cbPost,
                             callbackStagePostArgs: cbPostArgs,
                             callbackStageSimulate: cbSim,
                             callbackStageSimulateArgs: cbSimArgs,
                             callbackSharedArgs: cbSharedArgs,
                             logDebug: logDebug)
    {
        println "\u250C\n" +
                "\u2502 Hello from ${stage_name} body!\n" +
                "\u2502 logDebug = ${cbSharedArgs}\n" +
                "\u2514"
    }
    println "\u2502 cbSharedArgs: ${cbSharedArgs}\n" +
            "\u2502 logDebug: ${logDebug}"


    // Kitchen Sink! Provide ALL callbacks (not skipped, simulated)
    stage_name   = "Kitchen Sink [FT]"
    skip         = false
    simulate     = true
    logDebug     = [:]
    cbSharedArgs = [:]
    spifi_stages.spifi_stage(stageName: stage_name,
                             simulate: false,
                             skip: skip,
                             callbackStagePre: cbPre,
                             callbackStagePreArgs: cbPreArgs,
                             callbackStageSkipped: cbSkippedWithArgs,
                             callbackStageSkippedArgs: cbSkippedArgs,
                             callbackStageBodyPre: cbBodyPre,
                             callbackStageBodyPreArgs: cbBodyPreArgs,
                             callbackStageBodyPost: cbBodyPost,
                             callbackStageBodyPostArgs: cbBodyPostArgs,
                             callbackStagePost: cbPost,
                             callbackStagePostArgs: cbPostArgs,
                             callbackStageSimulate: cbSim,
                             callbackStageSimulateArgs: cbSimArgs,
                             callbackSharedArgs: cbSharedArgs,
                             logDebug: logDebug)
    {
        println "\u250C\n" +
                "\u2502 Hello from ${stage_name} body!\n" +
                "\u2502 logDebug = ${cbSharedArgs}\n" +
                "\u2514"
    }
    println "\u2502 cbSharedArgs: ${cbSharedArgs}\n" +
            "\u2502 logDebug: ${logDebug}"


    // Kitchen Sink! Provide ALL callbacks (skipped, simulated)
    stage_name   = "Kitchen Sink [TF]"
    skip         = true
    simulate     = true
    logDebug     = [:]
    cbSharedArgs = [:]
    spifi_stages.spifi_stage(stageName: stage_name,
                             simulate: false,
                             skip: skip,
                             callbackStagePre: cbPre,
                             callbackStagePreArgs: cbPreArgs,
                             callbackStageSkipped: cbSkippedWithArgs,
                             callbackStageSkippedArgs: cbSkippedArgs,
                             callbackStageBodyPre: cbBodyPre,
                             callbackStageBodyPreArgs: cbBodyPreArgs,
                             callbackStageBodyPost: cbBodyPost,
                             callbackStageBodyPostArgs: cbBodyPostArgs,
                             callbackStagePost: cbPost,
                             callbackStagePostArgs: cbPostArgs,
                             callbackStageSimulate: cbSim,
                             callbackStageSimulateArgs: cbSimArgs,
                             callbackSharedArgs: cbSharedArgs,
                             logDebug: logDebug)
    {
        println "\u250C\n" +
                "\u2502 Hello from ${stage_name} body!\n" +
                "\u2502 logDebug = ${cbSharedArgs}\n" +
                "\u2514"
    }
    println "\u2502 cbSharedArgs: ${cbSharedArgs}\n" +
            "\u2502 logDebug: ${logDebug}"

}

