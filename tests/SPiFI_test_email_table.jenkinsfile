#!/usr/bin/env groovy
/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

// Load the SPiFI library, v1.0.0
@Library('SPiFI@bgcolor_test') _

properties([
    buildDiscarder(
        logRotator(daysToKeepStr: '90', numToKeepStr: '30', artifactDaysToKeepStr: '', artifactNumToKeepStr: '')
    ),
    disableConcurrentBuilds(),
    pipelineTriggers([cron('0 23 * * *')]),
    parameters([ booleanParam(name: 'DryRun', defaultValue: true,
                              description: '''dry-run mode: echo commands but don't run anything'''),
                 booleanParam(name: 'CleanWorkspace', defaultValue: false,
                              description: '''Optionally clean the workspace before entering the pipeline.'''),
                 stringParam(name: 'EmailReplyTo', defaultValue: "wcmclen@sandia.gov",
                             description: '''Reply-To email address for generated status messages.'''),
                 stringParam(name: 'EmailDevOps',  defaultValue: "wcmclen@sandia.gov",
                             description: '''Email list for dev-ops team.  Separate multiple email addresses using spaces.''')
               ])
])


// Create state variables for the Parameters.
// - You can control parameters in a Jenkinsfile using the "properties" block above,
//   but Jenkins won't know about the parameter until it runs once.  To avoid errors,
//   it's useful to create separate state variables with defaults for that first run
//   where the parameter won't exist.
Boolean do_clean_workspace = false
Boolean do_dry_run = true
String email_devops = "wcmclen@sandia.gov"
String email_replyto   = "wcmclen@sandia.gov"

// If the parameter exists, set the values.
if(params.containsKey("DryRun"))
{
    do_dry_run = params.DryRun;
}
if(params.containsKey("EmailReplyTo"))
{
    email_replyto = params.EmailReplyTo
}
if(params.containsKey("EmailDevOps"))
{
    email_devops = params.EmailDevOps
}
if(params.containsKey("CleanWorkspace"))
{
    do_clean_workspace = params.CleanWorkspace
}

// Create other variables that we wish to keep around to pass information
// across stages.
String pipeline_status = "SUCCESS"
String email_body = "<H1>Summary</H1>"


node("master")
{

    // Clean the workspace if requested.
    stage("Cleanup")
    {
        if(do_clean_workspace)
        {
            cleanWs()
        }
    } // end Stage: cleanup


    // Do some work
    stage("Run Tests")
    {
        // Instantiate a ParallelJobLauncher
        def launcher = new gov.sandia.sems.spifi.ParallelJobLauncher(this)

        // Add some jobs to run
        launcher.appendJob(label: "T-01",
                           job_name: "SPiFI_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "SUCCESS")),
                                         (string(name:"SLEEP_TIME", value: "5"))
                                       ]
                           )
        launcher.appendJob(label: "T-02",
                           job_name: "SPiFI_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "SUCCESS")),
                                         (string(name:"SLEEP_TIME", value: "6"))
                                       ]
                           )

        // Pretty Print the list of jobs to console output
        launcher.printJobList()

        // Launch the jobs and save the results
        def results = launcher.launchInParallel()

        // Get the summary stats of the run
        def summary = launcher.getLastResultSummary()

        // Print out ASCII tables of the run.
        def results_util = new gov.sandia.sems.spifi.ResultsUtility(env: this)

        // Print out the summary table to the Jenkins console (i.e., NUMJOBS, NUMSUCCESS, NUMFAILURE, etc.)
        println results_util.genResultSummaryTable(format: "ASCII", summary: summary)

        // Print out the details table of the job that ran.
        // This provides the status of the individual jobs, etc.
        println results_util.genResultDetailTable(format: "ASCII", results: results)

        // Update the email_body with HTML tables
        email_body += "<H3>Job Execution Results</H3>\n"
        email_body += results_util.genResultDetailTable(format: "HTML", results: results)
        // If all jobs didn't pass, update the pipeline_status var
        if(summary.NUMJOBS != summary.NUMSUCCESS)
        {
            pipeline_status = 'FAILURE'
        }
    }  // end stage: Run Tests


    // Email the results to DevOPS
    stage("Notify")
    {
        // Set up email subject and prepend a header to the email based on status.
        String email_subject = "My Test Results: SUCCESS"
        if("SUCCESS" != pipeline_status)
        {
            email_subject = "My Test Results: FAILURE"
            email_body = "<H1>Testing Result: FAILURE</H1>\n" + email_body
        }
        else
        {
            email_body = "<H1>Testing Result: SUCCESS</H1>\n" + email_body
        }

        // Set the Jenkins pipeline status.
        // Note: This must be one of:  SUCCESS, FAILURE, UNSTABLE, ABORTED, NOT_BUILT
        currentBuild.result = pipeline_status

        // Create a SPiFI HTMLUtility object to generate the html document for emailing.
        html_util = new gov.sandia.sems.spifi.HTMLUtility(env: this)

        // Send the email using Jenkins' email utility.
        mail to:       email_devops,
             replyTo:  email_replyto,
             subject:  email_subject,
             body:     html_util.generate(body: email_body),
             mimeType: "text/html"
    }  // end stage: Notify

}  // end node()


/*
        // Stage 4: Parallel Job Launcher (real-run mode jobs)
        stage("4) Test Parallel Job Launcher (real-run mode)")
        {
            boolean stage_passed = true

            def launcher = new gov.sandia.sems.spifi.ParallelJobLauncher(this)

            // Add one job of each type to the list
            exit_status_list.each
            {   _exit_status ->

                println ">>> LAUNCHER: APPEND(T-${_exit_status}-RUN)"

                launcher.appendJob(label: "T-${_exit_status}-RUN",
                                   job_name: "SPiFI_test_selectable_status",
                                   timeout: 90,
                                   timeout_unit: "SECONDS",
                                   parameters: [ (string(name:"EXIT_STATUS",  value: "${_exit_status}")),
                                                 (string(name:"SLEEP_TIME", value: "1"))
                                               ]
                                  )
            }

            // Add jobs that test expected_duration_min and expected_duration_max bounds
            // Both should have their status reset to UNSTABLE
            launcher.appendJob(label: "T-EXPECTED-DURATION-MIN-RUN",
                                job_name: "SPiFI_test_selectable_status",
                                timeout: 90,
                                timeout_unit: "SECONDS",
                                expected_duration_min: 1,
                                expected_duration_units: "MINUTES",
                                parameters: [ (string(name:"EXIT_STATUS",  value: "SUCCESS")),
                                              (string(name:"SLEEP_TIME", value: "12"))
                                            ]
                                )

            launcher.appendJob(label: "T-EXPECTED-DURATION-MAX-RUN",
                                job_name: "SPiFI_test_selectable_status",
                                timeout: 90,
                                timeout_unit: "SECONDS",
                                expected_duration_max: 8,
                                expected_duration_units: "SECONDS",
                                parameters: [ (string(name:"EXIT_STATUS",  value: "SUCCESS")),
                                              (string(name:"SLEEP_TIME", value: "12"))
                                            ]
                                )

            // Print out the list of jobs.
            try
            {
                launcher.printJobList()
            }
            catch(ex)
            {
                println "ERROR:\n${ex}"
                println ">>> ERROR: parallelJobLauncher -- printJobList failed"
                sendEmailFailureAndQuit(to: emailDevOps, reply_to: emailReplyTo, body: email_body)
                return
            }

            // Launch the jobs in parallel
            try
            {
                launcher_results = launcher.launchInParallel()

                println(">>> results: ${launcher_results}")

                email_body += "<H3>Stage (4): Test Parallel Job Launcher (real-run mode)</H3>\n"

                email_body += "<ol>\n"
                exit_status_list.each
                {   _exit_status ->

                    String test_name = "T-${_exit_status}-RUN"

                    if(launcher_results["${test_name}"].status == "${_exit_status}")
                    {
                       email_body += "<li>PASSED: ${test_name}</li>\n"
                    }
                    else
                    {
                       stage_passed = false
                       email_body += "<li>FAILED: ${test_name}</li>\n"
                    }
                }
                email_body += "</ol>\n"
            }


 */
