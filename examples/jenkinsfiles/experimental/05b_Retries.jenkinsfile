#!/usr/bin/env groovy

// BEGIN JOB PARAMETERS
// END JOB PARAMETERS

// Progressive retry delay -- total attempts will be the
// length of this list + 1 to account for the first attempt.
// List retry_delay = [ 10, 10, 10 ]
List retry_delay = [ 1, 5, 10, 15, 20 ]

Boolean stage_ok = true
String  status_pipeline = "SUCCESS"


// Append a 0-second retry delay to the end of the list so we
// run the last test after the final delay specified above.
retry_delay += 0

fail_the_test=true


// timestamps {   // ASCIC-Jenkins has no timestamps module installed?
node()
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    //  S T A G E   B E G I N
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    stage("Execute")
    {
        Integer attempt = 0

        stage_ok = true

        println "\u27A4\n" +
                "\u27A4 Stage: Execute\n" +
                "\u27A4"

        try
        {
            retry( retry_delay.size() )
            {
                try
                {
                    attempt++
                    println "RETRY_TEST> Attempt #${attempt}"

                    if(fail_the_test)
                    {
                        println "RETRY_TEST> Failed on attempt: ${attempt}"
                        throw new Exception("The thing failed!")
                    }
                    println "RETRY_TEST> Succeeded after ${attempt} attempts."

                }   // end try()
                catch(e)
                {
                    println "RETRY_TEST> Caught error:\n${e}\n" +
                            "RETRY_TEST> Retrying in ${retry_delay[attempt-1]} seconds."
                    sleep retry_delay[attempt-1]
                    throw e
                }   // end catch()
            }       // end retry()
        }           // end try()
        catch(e)
        {
            println "RETRY_TEST> Caught error:\n${e}\n" +
                    "RETRY_TEST> Final ERROR condition encountered after ${attempt} attempts."
            stage_ok = false
        }
    } // End Stage Clone Trilinos

    // If previous stage failed, mark the pipeline as having failed.
    if(false == stage_ok)
    {
        status_pipeline = "FAILURE"
        currentBuild.result="FAILURE"
    }


} // end node()

// } // End Timestamps (ASCIC Jenkins doesn't have the plugin for this)



