#!/usr/bin/env groovy

// BEGIN JOB PARAMETERS
// END JOB PARAMETERS

// Progressive retry delay -- total attempts will be the
// length of this list + 1 to account for the first attempt.
List retry_delay = [ 1, 5, 10, 15, 20 ]

Boolean stage_ok = true
String  status_pipeline = "SUCCESS"


// Append a 0-second retry delay to the end of the list so we
// run the last test after the final delay specified above.
retry_delay += 0


// timestamps {   // ASCIC-Jenkins has no timestamps module installed?
node()
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    //  S T A G E   B E G I N
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    stage("Execute")
    {

        stage_ok = true

        println "\u27A4\n" +
                "\u27A4 Stage: Execute\n" +
                "\u27A4"

        Integer attempt = 0
        Boolean attempt_failed = true
        Exception attempt_exception = null
        while( attempt_failed && attempt < retry_delay.size() )
        {
            attempt++
            attempt_failed = false
            try
            {
                println "RETRY_TEST> Attempt #${attempt}"

                // Throw exception if the test 'failed' to invoke retries.
                println "RETRY_TEST> Failed on attempt: ${attempt}"
                throw new Exception("The thing failed!")

                println "RETRY_TEST> Succeeded after ${attempt} attempts."
            }
            catch(e)
            {
                if(attempt < retry_delay.size())
                {
                    println "====================================\n" +
                            "= F A I L E D   A T T E M P T   #${attempt}\n" +
                            "====================================\n" +
                            "Retrying in ${retry_delay[attempt-1]} seconds."
                    sleep retry_delay[attempt-1]
                }
                attempt_failed = true
                attempt_exception = e
            }
        }
        if(attempt_failed)
        {
            println "==========================================================================\n" +
                    "= F A I L E D   T E S T   A F T E R   ${attempt-1}   A T T E M P T S\n" +
                    "==========================================================================\n" +
                    "Final error message:\n${attempt_exception}\n" +
                    "==========================================================================\n"
            stage_ok = false
        }

    } // End Stage Clone Trilinos

    // If previous stage failed, mark the pipeline as having failed.
    if(false == stage_ok)
    {
        status_pipeline = "FAILURE"
        currentBuild.result="FAILURE"
    }


} // end node()

// } // End Timestamps (ASCIC Jenkins doesn't have the plugin for this)



