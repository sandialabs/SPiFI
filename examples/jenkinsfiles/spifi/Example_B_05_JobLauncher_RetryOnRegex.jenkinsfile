#!/usr/bin/env groovy
/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */


def libspifi = library("SPiFI-DEV@master").gov.sandia.sems.spifi

/**
 * Launch a set of jobs in parallel using SPiFI
 * Note: the sub-jobs are the jobs located in the `tests/` directory within SPiFI.
 */
node("RHEL7 || OS_RHEL7 || master")
{
    // Pipeline Stage
    stage("MyStage")
    {
        // Instantiate a JobLauncher
        def spifi_jl = libspifi.JobLauncher.new(env: this)

        // Run SPiFI_test_pass_every_third job (this will run the sequence FAILURE, UNSTABLE, FAILURE*, SUCCESS
        // based on the PARAM_THRESHOLD parameter which dictates which run in the sequence will be the SUCCESS
        // output. When this job fails, it will include the string "TestingError_<STATUS>" in its console output
        // for matching by the retry_conditions parameters.
        spifi_jl.appendJob(label: "T-01",
                           job_name: "SPiFI_test_pass_every_third",
                           timeout: 6,
                           timeout_unit: "MINUTES",
                           parameters: [ (string(name:"NODE_RESTRICTION", value: "master")),
                                         (string(name:"PARAM_THRESHOLD",  value: "3"))
                                       ],
                           dry_run: false,
                           retry_max_count: 10,
                           retry_conditions: [ libspifi.DelayedRetryOnRegex.new("env": this,
                                                                                "retry_delay": 1,
                                                                                "retry_delay_units": "MINUTES",
                                                                                "retry_regex": "TestingError_UNSTABLE"),
                                               libspifi.DelayedRetryOnRegex.new("env": this,
                                                                                "retry_delay": 10,
                                                                                "retry_delay_units": "SECONDS",
                                                                                "retry_regex": "TestingError_FAILURE")
                                             ]
                          )

        // Adding a 2nd job that will SUCCEED with no retries.
        spifi_jl.appendJob(label: "T-02",
                           job_name: "SPiFI_test_selectable_status",
                           timeout: 90,
                           timeout_unit: "SECONDS",
                           parameters: [ (string(name:"EXIT_STATUS",  value: "SUCCESS")),
                                         (string(name:"SLEEP_TIME", value: "1"))
                                       ]
                           )

        // Pretty Print the list of jobs to console output
        spifi_jl.printJobList()

        // Launch the jobs
        spifi_jl.launchInParallel()

        // Get the summary stats of the run
        def summary = spifi_jl.getLastResultSummary()

        // Print out the results summary as a table to the console output
        def spifi_ru = libspifi.ResultsUtility.new(env: this)
        println spifi_ru.genResultSummaryTable(summary: summary, format: "ASCII")

        // Check the summary
        // If all jobs didn't pass, then exit the pipeline with a FAILURE status.
        if(summary.NUMJOBS != summary.NUMSUCCESS)
        {
            currentBuild.result = 'FAILURE'
            return
        }
    }  // end Stage


}  // end node()

