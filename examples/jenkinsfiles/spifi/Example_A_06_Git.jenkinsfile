#!/usr/bin/env groovy
/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

/**
 * Example demonstrating the use of the Git.clone() function in SPiFI.
 *
 * Valid for SPiFI versions:
 *  - 1.0.0 : if the repository has no submodules
 *  - 1.3.0 : for `recurse_submodules` and `shallow` options
 *            (these options will simply be ignored by previous versions)
 */


// Load the SPiFI library
@Library("SPiFI-DEV@master") _

// Configure properties
properties([
    parameters([
        string(name: "REPOSITORY_URL",
               defaultValue: 'git@gitlab-ex.sandia.gov:wcmclen/test-project-a.git',
               description: 'Git Repository to use',
               trim: true),
        credentials(name: "GIT_CREDENTIAL",
                    credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials',
                    defaultValue: '',
                    description: 'The Git credential to use for checking out the repository',
                    required: true)
    ])
])


// Quit if we don't have all the parameters
Boolean parameter_first_run = false
if(false == params.containsKey("REPOSITORY_URL"))   parameter_first_run = true
if(false == params.containsKey("GIT_CREDENTIAL"))   parameter_first_run = true
if(parameter_first_run)
{
    currentBuild.status = "UNSTABLE"
    return
}

// Fail early on obviously bad parameter values
assert params.GIT_CREDENTIAL != ""
assert params.REPOSITORY_URL != ""


timestamps()
{

// Launch pipeline on a rhel6 or rhel7 jenkins node
node("RHEL7 || OS_RHEL7 || master")
{

    cleanWs()

    // Pipeline Stage 1
    stage('Stage 1: SPiFI.Git()')
    {
        def spifi_git = new gov.sandia.sems.spifi.Git()

        Boolean clone_ok = spifi_git.clone(env: this,
                                           dir: "repo",
                                           url: params.REPOSITORY_URL,
                                           credentialsId: params.GIT_CREDENTIAL,
                                           branch: "master",
                                           recurse_submodules: true,
                                           retries: 3,
                                           retry_delay: 30,
                                           shallow: true,
                                           timeout: 10,
                                           timeout_units: "MINUTES",
                                           verbose: true)

        assert clone_ok : "Git clone failed"

    }  // End Stage 1



}  // end node()

}  // end timestamps
