#!/usr/bin/env groovy

// Load the SPiFI library
@Library('SPiFI') _

node()
{
    // Pipeline Stage
    stage("Stage 1")
    {
        // Instantiate a ParallelJobLauncher
        def launcher = new gov.sandia.sems.spifi.ParallelJobLauncher(this)

        // Add some jobs to run
        launcher.appendJob(label: "Job-1", job_name: "JENKINS_JOB_TO_RUN")
        launcher.appendJob(label: "Job-2", job_name: "ANOTHER_JENKINS_JOB")
        launcher.appendJob(label: "Job-3", job_name: "YET_ANOTHER_JENKINS_JOB")

        // Pretty Print the list of jobs to console output
        launcher.printJobList()

        // Launch the jobs and save the results
        def results = launcher.launchInParallel()

        // Get the summary stats of the run
        def summary = launcher.getLastResultSummary()

        // Print out ASCII tables of the run.
        def results_util = new gov.sandia.sems.spifi.ResultsUtility(env: this)

        // Print out the summary table to the Jenkins console (i.e., NUMJOBS, NUMSUCCESS, NUMFAILURE, etc.)
        println results_util.genResultSummaryTable(format: "ASCII", summary: summary)

        // Print out the details table of the job that ran.
        // This provides the status of the individual jobs, etc.
        println results_util.genResultDetailTable(format: "ASCII", results: results)

        // Check the summary
        // If all jobs didn't pass, then exit the pipeline with a FAILURE status.
        if(summary.NUMJOBS != summary.NUMSUCCESS)
        {
            // Set the build result, allowable values are: SUCCESS, FAILURE, UNSTABLE, ABORTED, NOT_BUILT
            currentBuild.result = 'FAILURE'
            return
        }
    }  // end Stage 1
}  // end node()
