/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

/**
 * Unittest: SPiFI_test_core_Git
 *
 * This test is designed to test the SPiFI Git module.
 */
String node_restriction = "RHEL7 || OS_RHEL7 || master"
properties([
    parameters([
        string(name: 'SPiFI_VERSION',
               defaultValue: 'SPiFI@master',
               trim: true,
               description: 'The SPiFI version to load'),
        string(name: 'NODE_RESTRICTION',
               defaultValue: node_restriction,
               trim: true,
               description: "Node restriction, default: '${node_restriction}'")
    ]),
])


String param_spifi_version = "SPiFI@master"
if( params.containsKey("SPiFI_VERSION") )
{
    param_spifi_version = params.SPiFI_VERSION
}


// Print timestamps to console log
timestamps()
{


/**
 * Launch a set of jobs in parallel using SPiFI
 *
 */
node(params.NODE_RESTRICTION)
{
    cleanWs()

    Integer num_tests = 0
    Integer num_failures = 0

    // Load in the base SPiFI library.
    def libspifi = library(param_spifi_version).gov.sandia.sems.spifi


    // Test the minimal git command
    stage("Stage 1: Clone SPiFI (Min)")
    {
        print_banner("Test Git.clone()")

        String clone_url = "https://github.com/sandialabs/SPiFI.git"

        try
        {
            num_tests++
            def spifi_git = libspifi.Git.new()

            Boolean clone_ok = true

            dir("SPiFI-min")
            {
                clone_ok = spifi_git.clone(env: this, url: clone_url)
            }

            assert clone_ok : "Git clone failed"

            println "SUCCESS!"
        }
        catch(e)
        {
            println "FAILURE!"
            println "ERROR occurred in Git.clone():\n${e}"
            num_failures++
        }
    }   // End Stage


    // Validate the tests
    stage("Validate (Min)")
    {
        print_banner("Validate Results")
        println "num_tests   : ${num_tests}\n" +
                "num_failures: ${num_failures}"

        sh label: 'LS-Top',
           encoding: 'UTF-8',
           script: 'ls -ltr ${WORKSPACE}'

        sh label: 'LS-SPiFI',
           encoding: 'UTF-8',
           script: 'ls -ltr ${WORKSPACE}/SPiFI-min'

        assert num_failures == 0 : "There were test failures."
    } // End Stage


    // Test a shallow clone w/ more options
    stage("Stage 2: Clone SPiFI (shallow)")
    {
        print_banner("Test Git.clone()")

        String clone_url = "https://github.com/sandialabs/SPiFI.git"

        try
        {
            num_tests++
            def spifi_git = libspifi.Git.new()

            def clone_ok = spifi_git.clone(env: this,
                                           dir: "SPiFI-shallow",
                                           url: clone_url,
                                           branch: "master",
                                           recurse_submodules: true,
                                           retries: 1,
                                           retry_delay: 10,
                                           shallow: true,
                                           timeout: 10,
                                           timeout_units: "MINUTES",
                                           verbose: true
                                           )

            assert clone_ok : "Git clone failed"

            println "SUCCESS!"
        }
        catch(e)
        {
            println "FAILURE!"
            println "ERROR occurred in Git.clone():\n${e}"
            num_failures++
        }
    }   // End Stage


    // Validate the tests
    stage("Validate (shallow)")
    {
        print_banner("Validate Results")
        println "num_tests   : ${num_tests}\n" +
                "num_failures: ${num_failures}"

        sh label: 'LS-Top',
           encoding: 'UTF-8',
           script: 'ls -ltr ${WORKSPACE}'

        sh label: 'LS-SPiFI',
           encoding: 'UTF-8',
           script: 'ls -ltr ${WORKSPACE}/SPiFI-shallow'

        assert num_failures == 0 : "There were test failures."
    } // End Stage


    // Delete the cloned directory.
    stage("Cleanup")
    {
        print_banner("Cleanup")
        dir("SPiFI")
        {
            // deleteDir()    // Disabled for now.
        }
    }  // End Stage


}  // End Node()

}  // End Timestamps()


/**
 *
 */
def print_banner(String text)
{
    println("\u27A4 +==============================================================================+\n" +
            "\u27A4 |\n" +
            "\u27A4 | ${text}\n" +
            "\u27A4 |\n" +
            "\u27A4 +==============================================================================+")
}


/**
 *
 */
def pretty_print_map(Map result)
{
    String output = ""
    result.each { key,value ->
        output += "- ${key}: ${value}\n"
    }
    println(output)
}

