#!/usr/bin/env groovy
/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

/**
 * SPiFI_test_helper_pass_every_third.jenkinsfile
 *
 * This jenkinsfile defines a pipeline job that is used for testing
 * and debugging other pipelines.
 *
 * This job is designed to exit with a SUCCESS status every third time
 * it's run and FAILURE otherwise.
 * The job will always run in the pattern: FAILURE, UNSTABLE, (FAILURE)*, SUCCESS
 * depending on what the threshold value is.  Note: The minimum useful threshold
 * setting is 3 since the first two will always be FAILURE, UNSTABLE
 *
 */
String node_restriction = "RHEL7 || OS_RHEL7 || master"
properties([
    disableConcurrentBuilds(),
    copyArtifactPermission("*"),
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '',
                              daysToKeepStr: '90',       numToKeepStr: '90')),
    parameters([
        string(name: "PARAM_THRESHOLD",
               defaultValue: '3',
               trim: true,
               description: "Set the length of the [FAILURE, ..., FAILURE, SUCCESS] sequence"),
        string(name: 'NODE_RESTRICTION',
               defaultValue: node_restriction,
               trim: true,
               description: "Node restriction, default: '${node_restriction}'")
    ])
])


Integer threshold = 3


if(params.containsKey("PARAM_THRESHOLD"))
{
    try
    {
        threshold = params.PARAM_THRESHOLD.toInteger()
    }
    catch(Exception e)
    {
        println "Error converting PARAM_THRESHOLD to Integer. Use default: ${threshold}"
    }
}

if(threshold < 3)
{
    println "WARNING: Setting threshold < 3 will still result in the sequence: FAILURE, UNSTABLE, SUCCESS"
}



node(params.NODE_RESTRICTION)
{
    timestamps()
    {


    stage('Load Artifact')
    {
        println "\u27A4\n" +
                "\u27A4 Stage: Load Artifact\n" +
                "\u27A4"

        try
        {
            copyArtifacts filter: "counter.txt",
                          projectName: "${JOB_NAME}",
                          selector: lastCompleted(),
                          optional: true

            println("Artifact loaded successfully")
        }
        catch(ex)
        {
            println("Artifact was not loaded.")
            //Integer counter = 0
            //writeFile file: 'counter.txt', text: "${counter}"
        }
    }


    stage('Evaluate')
    {
        println "\u27A4\n" +
                "\u27A4 Stage: Evaluate\n" +
                "\u27A4"

        String exitStatus = "FAILURE"

        if( ! fileExists('counter.txt') )
        {
            println ">>> counter.txt exists   : NO\n" +
                    ">>> counter value        : 1"

            writeFile file: 'counter.txt', text: '1'
        }
        else
        {
            println ">>> counter.txt exists   : YES"
            def text = readFile "counter.txt"
            Integer counter = 1
            try
            {
                counter = text.toInteger()
            } catch(Exception e) {
                counter = 0
            }
            counter++
            println ">>> counter value        : ${counter}"

            sh(script: 'rm counter.txt', returnStatus: true)
            writeFile file: 'counter.txt', text: "${counter}"

            if(counter == 2)
            {
                exitStatus = "UNSTABLE"
            }
            else if(counter > 2 && counter >= threshold)
            {
                println ">>> counter >= threshold : YES"
                sh(script: 'rm counter.txt', returnStatus: true)
                exitStatus = "SUCCESS"
            }

        }

        if( exitStatus != "SUCCESS" )
        {
            println ">>> SampleFailureMessage : TestingError_${exitStatus}"
        }

        currentBuild.result=exitStatus
        println ">>> set exit status      : ${exitStatus}"

    } // stage execute


    stage('Save Artifact')
    {
        println "\u27A4\n" +
                "\u27A4 Stage: Save Artifact\n" +
                "\u27A4"

        archiveArtifacts allowEmptyArchive: true,
                         artifacts: 'counter.txt'
    } // stage Save Artifact


    stage('Clean Workspace')
    {
        println "\u27A4\n" +
                "\u27A4 Stage: Clean Workspace\n" +
                "\u27A4"

        cleanWs()
    } // stage Clean Workspace


    } // timestamps

}  // node

