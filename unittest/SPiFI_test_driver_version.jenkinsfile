#!/usr/bin/env groovy
/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

/**
 * Unittest: SPiFI_test_driver_version
 *
 * This test is the main driver test for a specified VERSION of SPiFI
 * - This test will load in and use the JobLauncher as part of
 *   its core work, but will use minimal features from this tool. If
 *   something is broken with the minimal JobLauncher class we'll see
 *   this evidenced by just about everything failing.
 *
 */
String node_restriction = "RHEL7 || OS_RHEL7 || master"
properties([
    parameters([
        string(name: 'SPiFI_VERSION',
               defaultValue: 'SPiFI@master',
               trim: true,
               description: 'The SPiFI version to load'),
        string(name: 'NODE_RESTRICTION',
               defaultValue: node_restriction,
               trim: true,
               description: "Node restriction, default: '${node_restriction}'")
    ]),
])


String param_spifi_version = "SPiFI@master"
if( params.containsKey("SPiFI_VERSION") )
{
    param_spifi_version = params.SPiFI_VERSION
}


// Print timestamps to console log
timestamps()
{


node(params.NODE_RESTRICTION)
{
    // Global vars for node() { ... }
    Map job_params = [:]
    job_params.UNIQUEIFY        = "Testing Version ${param_spifi_version}"
    job_params.SPiFI_VERSION    = param_spifi_version
    job_params.NODE_RESTRICTION = params.NODE_RESTRICTION

    Boolean pipeline_passed = true
    String summary_email_body = ""


    /**
     * Executes 'helpers'
     */
    stage("Test Helpers")
    {
        print_banner("Stage: Test Helpers")

        // Note: the `build` command returns a RunWrapper object. Information on RunWrapper's API
        //       is here: https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html

        // Test the selectable_status helper.
        String expected_status = "SUCCESS"
        Map sub_stage_results = [:]
        Map sub_stages = [:]
        sub_stages["Test Helpers (A)"] = {
            String job_name = "SPiFI_test_helper_selectable_status"
            def rval = run_simple_job(job_name, expected_status, job_params)
            sub_stage_results[job_name] = rval
        }
        sub_stages["Test Helpers (B)"] = {
            String job_name = "SPiFI_test_helper_sample_job_01"
            def rval = run_simple_job(job_name, expected_status, job_params)
            sub_stage_results[job_name] = rval
        }
        sub_stages["Test Helpers (C)"] = {
            String job_name = "SPiFI_test_helper_sample_job_02"
            def rval = run_simple_job(job_name, expected_status, job_params)
            sub_stage_results[job_name] = rval
        }
        sub_stages["Test Helpers (D)"] = {
            String job_name = "SPiFI_test_helper_sample_job_03"
            def rval = run_simple_job(job_name, expected_status, job_params)
            sub_stage_results[job_name] = rval
        }
        sub_stages["Test Helpers (E)"] = {
            // Lock the pass_every_third call job it must be executed multiple times
            // in sequence to work properly.
            lock("SPiFI_pass_every_third")
            {
                def rval = null
                String job_name = "SPiFI_test_helper_pass_every_third"

                // Attempt this job up to 6 times to find the SUCCESS if it's out of sync.
                // it should normally pass every third run (FAILURE, UNSTABLE, SUCCESS)
                Boolean attempt_failed = true
                Integer attempt_number = 0
                while(attempt_failed && attempt_number < 6)
                {
                    attempt_number += 1
                    rval = run_simple_job(job_name, expected_status, job_params)
                    if(rval.status == "SUCCESS")
                    {
                        attempt_failed = false
                    }
                }
                // Save the final attempt
                sub_stage_results[job_name] = rval
            } // end lock()
        } // end sub_stage
        parallel(sub_stages)
        println(sub_stage_results)

        Boolean stage_failed = false

        // generate details
        summary_email_body += generate_output_details_html("Helpers", sub_stage_results)

        if( !sequence_was_successful(sub_stage_results) )
        {
            pipeline_passed = false
        }
    }   // End Stage


    /**
     *
     */
    stage("Test SPiFI Min")
    {
        print_banner("Stage: Test JobLauncher Min")

        def rval_list = [:]

        String expected_status = "SUCCESS"

        rval_list["Load_SPiFI"] = run_simple_job("SPiFI_test_core_load_spifi", expected_status, job_params)
        //print_result_summary(rval_list.Load_SPiFI)

        rval_list["JobLauncher_Min"] = run_simple_job("SPiFI_test_core_JobLauncher_Min", expected_status, job_params)
        //print_result_summary(rval_list.JobLauncher_Min)

        Boolean stage_failed = false

        // generate details
        summary_email_body += generate_output_details_html("SPiFI Min", rval_list)

        if( !sequence_was_successful(rval_list) )
        {
            pipeline_passed = false
        }
    }


    /**
     *
     */
    stage("Test SPiFI Core")
    {
        print_banner("Stage: Test SPiFI Core")

        // Load the base SPiFI library
        // def libspifi = library(param_spifi_version).gov.sandia.sems.spifi

        def rval_list = [:]
        String expected_status = "SUCCESS"

        rval_list["Shell"] = run_simple_job("SPiFI_test_core_Shell", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Git"] = run_simple_job("SPiFI_test_core_Git", expected_status, job_params)
        //print_result_summary(rval_list.Git)

        rval_list["Info"] = run_simple_job("SPiFI_test_core_Info", expected_status, job_params)
        //print_result_summary(rval_list.Info)

        rval_list["JenkinsTools"] = run_simple_job("SPiFI_test_core_JenkinsTools", expected_status, job_params)
        //print_result_summary(rval_list.JenkinsTools)

        rval_list["HTMLUtility"] = run_simple_job("SPiFI_test_core_HTMLUtility", expected_status, job_params)
        //print_result_summary(rval_list.JenkinsTools)

        Boolean stage_failed = false

        // generate details
        summary_email_body += generate_output_details_html("SPiFI Core", rval_list)

        if( !sequence_was_successful(rval_list) )
        {
            pipeline_passed = false
        }
    }   // End Stage


    /**
     *
     */
    stage("Test Examples")
    {
        print_banner("Stage: Test Examples")

        def rval_list = [:]
        String expected_status = "SUCCESS"

        rval_list["Example-A-01"] = run_simple_job("SPiFI_Example_A_01_Load_SPiFI", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-A-02"] = run_simple_job("SPiFI_Example_A_02_JobLauncher", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-A-03"] = run_simple_job("SPiFI_Example_A_03_JobLauncher_ResultTable", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-A-04"] = run_simple_job("SPiFI_Example_A_04_JobLauncher_MultiStage_Email", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-A-05"] = run_simple_job("SPiFI_Example_A_05_JobLauncher_RetryOnRegex", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        // Note: currently broken - this test needs updated credentials, etc. on Jenkins.
        //rval_list["Example-A-06"] = run_simple_job("SPiFI_Example_A_06_Git_clone", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-B-01"] = run_simple_job("SPiFI_Example_B_01_Load_SPiFI", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-B-02"] = run_simple_job("SPiFI_Example_B_02_JobLauncher", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-B-03"] = run_simple_job("SPiFI_Example_B_03_JobLauncher_ResultTable", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-B-04"] = run_simple_job("SPiFI_Example_B_04_JobLauncher_MultiStage_Email", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-B-05"] = run_simple_job("SPiFI_Example_B_05_JobLauncher_RetryOnRegex", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        // Note: currently broken - this test needs updated credentials, etc. on Jenkins.
        //rval_list["Example-B-06"] = run_simple_job("SPiFI_Example_B_06_Git_clone", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-B-07"] = run_simple_job("SPiFI_Example_B_07_Shell", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        rval_list["Example-B-08"] = run_simple_job("SPiFI_Example_B_08_Load_any_SPiFI", expected_status, job_params)
        //print_result_summary(rval_list.Shell)

        Boolean stage_failed = false

        // generate details
        summary_email_body += generate_output_details_html("SPiFI Examples", rval_list)

        if( !sequence_was_successful(rval_list) )
        {
            pipeline_passed = false
        }
    }   // End Stage


    /**
     *
     */
    stage("Test Experimental")
    {
        print_banner("Stage: Test Experimental")
        println(">>> This Section is Empty <<<")
    }   // End Stage


    /**
     *
     */
    stage("Reporting")
    {
        print_banner("Stage: Reporting")

        // Assemble HTML body
        String summary_email_header = """<!DOCTYPE html>
                <HTML>
                <HEAD>
                <STYLE>
                /* Defined <span/> blocks to allow in-line coloring/formatting of text */
                span.bold   { font-weight: bolder; }
                span.gray   { color: gray;    }
                span.red    { color: #990000; }
                span.green  { color: #009900; }
                span.blue   { color: #000099; }
                span.yellow { color: #999900; }
                div.Indent1 { text-indent: 1.0em; }
                </STYLE>
                </HEAD>

                <BODY>
                """.stripIndent()

        String pipeline_status_slug = ""
        if(pipeline_passed)
        {
            pipeline_status_slug = "&#9989; SUCCESS"
        }
        else
        {
            pipeline_status_slug = "&#10060; FAILURE"
        }

        summary_email_body = summary_email_header +
                            "<H1>${pipeline_status_slug}</H1>\n" +
                             summary_email_body   +
                             "\n</BODY>\n"

        println(summary_email_body)

        try
        {
            mail to: "wcmclen@sandia.gov",
                 replyTo: "wcmclen@sandia.gov",
                 subject: "SPiFI Test Summary",
                 body: summary_email_body,
                 mimeType: "text/html"
        }
        catch(ex)
        {
            println "\u2757 WARNING: Email connection failed"
        }

    }   // End Stage

}   // End Node
} // End Timestamps



////////////////////////////////////////////////////////////////////////////////
//
// H E L P E R   F U N C T I O N S
//
////////////////////////////////////////////////////////////////////////////////


/**
 *
 */
def print_banner(String text)
{
    println("\u27A4 +==============================================================================+\n" +
            "\u27A4 |\n" +
            "\u27A4 | ${text}\n" +
            "\u27A4 |\n" +
            "\u27A4 +==============================================================================+")
}


/**
 *
 */
Map run_simple_job(String job_name, String expected_status, Map job_params)
{
    Map output = [:]
    output.raw = build(job: job_name,
                       propagate: false,
                       wait: true,
                       parameters: [
                            string(name: "NODE_RESTRICTION", value: job_params.NODE_RESTRICTION),
                            string(name: "SPiFI_VERSION", value: job_params.SPiFI_VERSION),
                            string(name: "UNIQUEIFY", value: job_params.UNIQUEIFY)
                            ]
                       )

    // Save some quick-access results without requiring the api to the 'raw' entry,
    // which is a `org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper` object.
    output.job       = job_name
    output.status    = output.raw.getResult()
    output.duration  = output.raw.getDuration()/1000.0
    output.buildid   = output.raw.getId()

    // Set default results as successful
    output.expected = expected_status
    output.matched_expected = true
    output.body = "Job `${job_name}` was successful (${output.raw.getResult()})"

    // Get the tail of the console log (might not be possible without admin approval)
    //output.getLog100 = output.raw.getRawBuild().getLog(100)

    if( expected_status != output.raw.getResult() )
    {
        output.matched_expected = false
        output.body = "Job `${job_name}` did not succeed (${output.raw.getResult()})"
    }
    return output
}


/**
 * sequence_was_successful
 *
 * Determines if the set of jobs launched had a failure.
 */
Boolean sequence_was_successful(Map results)
{
    Boolean output = true
    results.each
    { key,value ->
        if( !value.matched_expected )
        {
            output = false
        }
    }
    return output
}


/**
 * generate_output_details_html
 *
 * Generate a section of the HTML report
 */
String generate_output_details_html(String stage_name, Map results)
{
    Boolean section_failed = false
    String summary_details_section = ""
    String summary_details_line = "<UL>\n"

    results.each
    { key,value ->
        println("---[ ${key} ]---")
        print_result_summary(value)
        String span_class = "green"
        String result_code = "PASS"
        if( !value.matched_expected )
        {
            section_failed = true
            span_class = "red"
            result_code = "FAIL -- ${value.status} (actual) != ${value.expected} (expected)"
        }
        summary_details_line += "<LI>${value.job}: <SPAN class='${span_class}'><B>${result_code}</B></SPAN></LI>\n"
    }
    summary_details_line += "</UL>\n"

    summary_details_section += "<H3>"
    if(section_failed)
    {
        summary_details_section += "&#10060; "
    }
    else
    {
        summary_details_section += "&#9989; "
    }
    summary_details_section += "Stage: ${stage_name}</H3>\n"
    summary_details_section += "<DIV class='Indent1'>\n"
    summary_details_section += "<DETAILS>\n"
    summary_details_section += "<SUMMARY>Details</SUMMARY>\n"
    summary_details_section += "${summary_details_line}\n"
    summary_details_section += "</DETAILS>\n"
    summary_details_section += "</DIV>\n"

    return summary_details_section
}


/**
 *
 */
def print_result_summary(Map result)
{
    String output = ""
    result.each { key,value ->
        output += "- ${key}: ${value}\n"
    }
    println(output)
}


