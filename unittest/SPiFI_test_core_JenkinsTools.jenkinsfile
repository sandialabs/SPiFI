/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

/**
 * Unittest: SPiFI_test_core_Info
 *
 * This test is designed to test the SPiFI Info module.
 */
String node_restriction = "RHEL7 || OS_RHEL7 || master"
properties([
    parameters([
        string(name: 'SPiFI_VERSION',
               defaultValue: 'SPiFI@master',
               trim: true,
               description: 'The SPiFI version to load'),
        string(name: 'NODE_RESTRICTION',
               defaultValue: node_restriction,
               trim: true,
               description: "Node restriction, default: '${node_restriction}'")
    ]),
])


String param_spifi_version = "SPiFI@master"
if( params.containsKey("SPiFI_VERSION") )
{
    param_spifi_version = params.SPiFI_VERSION
}


// Print timestamps to console log
timestamps()
{


/**
 * Launch a set of jobs in parallel using SPiFI
 *
 */
node(params.NODE_RESTRICTION)
{
    cleanWs()

    Integer num_tests = 0
    Integer num_failures = 0

    // Load in the base SPiFI library.
    def libspifi = library(param_spifi_version).gov.sandia.sems.spifi


    stage("Stage 1: spifi_get_exception_stacktrace_pretty")
    {
        print_banner("Test spifi_get_exception_stacktrace_pretty")

        try
        {
            num_tests++
            def spifi_jt = libspifi.JenkinsTools.new()

            try
            {
                throw new Exception("This is a test exception!")
            }
            catch(ex)
            {
                println "An exception occurred:\n${ex}\n"

                String str_ex = spifi_jt.spifi_get_exception_stacktrace_pretty(env: this, exception: ex)
                println "Beautified Exception Stacktrace:\n${str_ex}\n"
            }
            println "SUCCESS!"
        }
        catch(e)
        {
            println "FAILURE!"
            println "ERROR occurred in JenkinsTools.spifi_get_exception_stacktrace_pretty():\n${e}"
            num_failures++
        }
    }   // End Stage



    stage("Stage 2: spifi_checked_get_parameter")
    {
        print_banner("Test spifi_checked_get_parameter")

        Map test_parameters = [:]
        test_parameters["FOO"] = "BAR"

        try
        {
            num_tests++
            String value = ""
            def spifi_jt = libspifi.JenkinsTools.new()


            print_banner("spifi_checked_get_paramter: Min params + existing parameter")
            value = spifi_jt.spifi_checked_get_parameter(env: this, params: test_parameters, key: "FOO")
            println "value = ${value}"
            assert value == "BAR"


            print_banner("spifi_checked_get_paramter: Min params + missing parameter")
            value = spifi_jt.spifi_checked_get_parameter(env: this, params: test_parameters, key: "BIFF")
            println "value = ${value}"
            assert value == null


            print_banner("spifi_checked_get_paramter: existing param + required")
            value = spifi_jt.spifi_checked_get_parameter(env: this, params: test_parameters, key: "FOO", required: true)
            println "value = ${value}"
            assert value == "BAR"


            print_banner("spifi_checked_get_paramter: missing param + required")
            try
            {
                value = spifi_jt.spifi_checked_get_parameter(env: this, params: test_parameters, key: "BIFF", required: true)
                println "ERROR: Missing a REQUIRED value should throw an exception!"
                num_failures++
            }
            catch(ex)
            {
                println "Test success, exception was thrown!"
            }


            print_banner("spifi_checked_get_paramter: existing optional param + default + nosave")
            value = spifi_jt.spifi_checked_get_parameter(env: this, params: test_parameters, key: "FOO", default: "BUFF")
            println "value = ${value}"
            assert value == "BAR"


            print_banner("spifi_checked_get_paramter: missing optional param + default + nosave")
            value = spifi_jt.spifi_checked_get_parameter(env: this, params: test_parameters, key: "BIFF", default: "BUFF")
            println "value = ${value}"
            println "test_parameters = ${test_parameters}"
            assert value == "BUFF"
            assert !test_parameters.containsKey("BIFF")


            print_banner("spifi_checked_get_paramter: missing optional param + default + nosave")
            value = spifi_jt.spifi_checked_get_parameter(env: this,
                                                         params: test_parameters,
                                                         key: "BIFF",
                                                         default: "BUFF",
                                                         in_place: true)
            println "value = ${value}"
            println "test_parameters = ${test_parameters}"
            assert value == "BUFF"
            assert test_parameters.containsKey("BIFF")
            assert test_parameters.BIFF == "BUFF"

            println "SUCCESS!"
        }
        catch(e)
        {
            println "FAILURE!"
            println "ERROR occurred in JenkinsTools.spifi_checked_get_parameter():\n${e}"
            num_failures++
        }
    }   // End Stage



}  // End Node()

}  // End Timestamps()


/**
 *
 */
def print_banner(String text)
{
    println("\u27A4 +==============================================================================+\n" +
            "\u27A4 |\n" +
            "\u27A4 | ${text}\n" +
            "\u27A4 |\n" +
            "\u27A4 +==============================================================================+")
}


/**
 *
 */
def pretty_print_map(Map result)
{
    String output = ""
    result.each { key,value ->
        output += "- ${key}: ${value}\n"
    }
    println(output)
}

