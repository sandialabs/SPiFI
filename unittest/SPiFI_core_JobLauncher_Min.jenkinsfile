/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

/**
 * Unittest: SPiFI_test_core_JobLauncher_Min
 *
 * This test is designed to test a _minimal_ JobLauncher
 * The purpose is to do a minimal test on the JobLauncher
 * so that we can use it later to launch multiple SPiFI
 * core tests, etc.
 */
String node_restriction = "RHEL7 || OS_RHEL7 || master"
properties([
    parameters([
        string(name: 'SPiFI_VERSION',
               defaultValue: 'SPiFI-DEV@master',
               trim: true,
               description: 'The SPiFI version to load'),
        string(name: 'NODE_RESTRICTION',
               defaultValue: node_restriction,
               trim: true,
               description: "Node restriction, default: '${node_restriction}'")
    ]),
])


String param_spifi_version = "SPiFI@master"
if( params.containsKey("SPiFI_VERSION") )
{
    param_spifi_version = params.SPiFI_VERSION
}


// Print timestamps to console log
timestamps()
{


/**
 * Launch a set of jobs in parallel using SPiFI
 *
 */
node(params.NODE_RESTRICTION)
{
    // Load in the base SPiFI library.
    def libspifi = library(param_spifi_version).gov.sandia.sems.spifi


    // Pipeline Stage
    stage("Stage 1")
    {
        // Instantiate a JobLauncher
        def spifi_jl = libspifi.JobLauncher.new(env: this)

        // Add some jobs to run
        spifi_jl.appendJob(label: "Job-1", job_name: "SPiFI_test_helper_sample_job_01")
        spifi_jl.appendJob(label: "Job-2", job_name: "SPiFI_test_helper_sample_job_02")
        spifi_jl.appendJob(label: "Job-3", job_name: "SPiFI_test_helper_sample_job_03")

        // Pretty Print the list of jobs to console output
        spifi_jl.printJobList()

        // Launch the jobs
        def results = spifi_jl.launchInParallel()

        // Get the summary stats of the run
        def summary = spifi_jl.getLastResultSummary()

        println("+--------------------------------------+\n" +
                "| R E S U L T S\n" +
                "+--------------------------------------+\n" +
                results)

        println("+--------------------------------------+\n" +
                "| S U M M A R Y\n" +
                "+--------------------------------------+\n" +
                summary)

        // Check the summary
        // If all jobs didn't pass, then exit the pipeline with a FAILURE status.
        if(summary.NUMJOBS != summary.NUMSUCCESS)
        {
            // Set the build result, allowable values are: SUCCESS, FAILURE, UNSTABLE, ABORTED, NOT_BUILT
            currentBuild.result = 'FAILURE'
            return
        }
    }  // End Stage


}  // End Node()


}  // End Timestamps()


