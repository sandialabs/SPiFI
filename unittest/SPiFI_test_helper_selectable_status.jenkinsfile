#!/usr/bin/env groovy
/*
 *  SEMS Pipeline Framework Infrastructure (SPiFI)
 *
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * LICENSE (3-Clause BSD)
 * ----------------------
 * Copyright 2020 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
 * Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
 * certain rights in this software.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact
 * -------
 * William C. McLendon III (wcmclen@sandia.gov)
 */

/**
 * SPiFI_test_selectable_status.jenkinsfile
 *
 * This jenkinsfile defines a pipeline job that is used for testing
 * and debugging other pipelines.
 *
 * This job will pause for a specified number of seconds before returning
 * with a desired exit status.
 *
 * @param NODE_RESTRICTION The node expression that dictates where this runs.
 * @param UNIQUEIFY  Unused. If the same job gets launched around the same time with
 *                   the same parameters, Jenkins will combine the instances and not
 *                   launch extra copies. This parameter is unused and provides a
 *                   mechanism to 'uniqueify' the job by passing in a randomized string
 *                   when calling this job.
 * @param SLEEP_TIME The number of seconds that this job will 'sleep' before
 *                   completing.  Default: 10 seconds.
 * @param EXIT_STATUS The status this job will report to Jenkins.
 *                    Allowable status codes currently in Jenkins are:
 *                    - SUCCESS   : Job completed successfully (Default)
 *                    - FAILURE   : Job failed
 *                    - UNSTABLE  : Job reported as unstable
 *                    - ABORTED   : Job was aborted
 *                    - NOT_BUILT : Job was not built
 *
 */

String node_restriction = "RHEL7 || OS_RHEL7 || master"
properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '',
                              daysToKeepStr: '90',       numToKeepStr: '90')),
    parameters([
        string(defaultValue: '10',
               description: 'Sleep time (seconds)',
               name: 'SLEEP_TIME'),
        string(defaultValue: node_restriction,
               description: "Node restriction, default: '${node_restriction}'",
               name: 'NODE_RESTRICTION'),
        choice(choices: "SUCCESS\nFAILURE\nUNSTABLE\nABORTED\nNOT_BUILT",
               description: 'Possible exit statuses for the job.',
               name: 'EXIT_STATUS'),
        string(name: "UNIQUEIFY",
               defaultValue: "TEST",
               trim: true,
               description: "If the same job is loaded multiple times with the same " +
                            "parameter within a certain amount of time, Jenkins will " +
                            "only launch one instance. This parameter gives the option to " +
                            "provide a randomized string that will make Jenkins spawn " +
                            "separate jobs for parallel testing.")
    ])
])


if(params.containsKey("NODE_RESTRICTION"))
{
  node_restriction = params.NODE_RESTRICTION
}

int sleep_time = params.containsKey("SLEEP_TIME") ? params.SLEEP_TIME : 10



node(node_restriction)
{
    timestamps()
    {

    try
    {
        cleanWs()
    }
    catch(e)
    {
        println "WARNING!!!  cleanWs() failed.\n${e}"
    }


    stage('Execute')
    {
        println "\u27A4\n" +
                "\u27A4 Stage: Execute\n" +
                "\u27A4"

        String exitStatus = "SUCCESS"
        if(params.containsKey("EXIT_STATUS"))
        {
            exitStatus = params.EXIT_STATUS
        }

        timeout(time: sleep_time*2, unit: "SECONDS")
        {
            println("EXIT_STATUS: ${exitStatus}")
            println("SLEEP_DELAY: ${sleep_time}")

            sleep sleep_time

            currentBuild.result=exitStatus

        } // timeout

    } // stage execute

    } // timestamps

}  // node

