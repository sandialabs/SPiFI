#!/usr/bin/groovy
/**
 * A conditional stage wrapper with visitors
 *
 *
 *
 */
node()
{
    // Minimal Run, closest to standard "stage" command.
    conditionalStage(stageName: "Test 1")
    {
        println "\u250C\n" +
                "\u2502 Hello from test 1 body!\n" +
                "\u2514"
    }


    // Skip stage with generic message
    conditionalStage(stageName: "Test 2",
                     stageCondition: false)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 2 body!\n" +
                "\u2514"
    }


    // Skip stage with Callback
    Closure cbSkipped = {
        println "\u250C\n" +
                "\u2502 Hello from test cbSkipped\n" +
                "\u2514"
    }
    conditionalStage(stageName: "Test 3",
                     stageCondition: false,
                     callbackStageSkipped: cbSkipped)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 3 body!\n" +
                "\u2514"
    }


    // Skip stage with Callback + CallbackArgs
    Closure cbSkippedWithArgs = { args=[:], wksp=[:] ->
        println "\u2502 Hello from cbSkippedWithArgs\n" +
                "\u2502 - args: ${args}"
    }
    Map cbSkippedArgs = [ "foo": "bar" ]
    conditionalStage(stageName: "Test 4",
                     stageCondition: false,
                     callbackStageSkipped: cbSkippedWithArgs,
                     callbackStageSkippedArgs: cbSkippedArgs)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 4 body!\n" +
                "\u2514"
    }


    // Execute Stage + callbackPre + callbackPost
    Closure cbPre = {
        println "\u2502 [Test 5] Hello from cbPre"
    }
    Closure cbPost = {
        println "\u2502 [Test 5] Hello from cbPost"
    }
    conditionalStage(stageName: "Test 5",
                     callbackStagePre: cbPre,
                     callbackStagePost: cbPost)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 5 body!\n" +
                "\u2514"
    }


    // Execute Stage + callbackPre + callbackPost + Args
    Closure cbPreT6 = {
        cbArgs=[:], cbSharedArgs=[:] ->
        println "\u2502 [Test 6] Hello from cbPre\n" +
                "\u2502 - cbArgs      : ${cbArgs}\n" +
                "\u2502 - cbSharedArgs: ${cbSharedArgs}"
        cbSharedArgs["foo"] = "bar"
        println "\u2502 - cbSharedArgs: ${cbSharedArgs}"
    }
    Closure cbPostT6 = {
        cbArgs=[:], cbSharedArgs=[:] ->
        println "\u2502 [Test 6] Hello from cbPost\n" +
                "\u2502 - cbArgs      : ${cbArgs}\n" +
                "\u2502 - cbSharedArgs: ${cbSharedArgs}"

    }
    Map cbSharedArgsT6 = [:]
    conditionalStage(stageName: "Test 6",
                     callbackStagePre: cbPreT6,
                     callbackStagePost: cbPostT6,
                     callbackSharedArgs: cbSharedArgsT6)
    {
        println "\u250C\n" +
                "\u2502 Hello from test 6 body!\n" +
                "\u2514"
    }
    println "cbSharedArgsT6: ${cbSharedArgsT6}"

}



/**
 * conditionalStage
 *
 * @param stageName                  String  [REQUIRED] Name of the stage
 * @param stageCondition             Boolean [OPTIONAL] Skip stage if false. Default: true
 * @param dryRun                     Toggle dry-run mode. Default: false
 * @param callbackStagePre           Closure [OPTIONAL] Execute prior to stage()
 * @param callbackStagePreArgs       Map     [OPTIONAL]
 * @param callbackStageSkipped       Closure [OPTIONAL] Executed if a stage is skipped due to stageCondition failure.
 * @param callbackStageSkippedArgs   Map     [OPTIONAL] Map containing arguments to callbackStageSkipped(args).
 *                                                      Reserved key names: "stage_name"
 * @param callbackStageCompleted     Closure [OPTIONAL] Executed if the stage is executed to completion.
 * @param callbackStageCompletedArgs Map     [OPTIONAL] Map containing arguments to callbackStageCompleted(args).
 *                                                      Reserved key names: "stage_name", "stage_result"
 * @param callbackStagePost          Closure [OPTIONAL] Execute after stage()
 * @param callbackStagePostArgs      Map     [OPTIONAL]
 * @param callbackStageDryRun        Closure [OPTIONAL] Executed if stage is in dry-run mode.
 * @param callbackStageDryRunArgs    Map     [OPTIONAL] Map containing arguments to callbackStageDryRun(args).
 * @param callbackSharedArgs         Map     [OPTIONAL] Map containing SHARED arguments across ALL callbacks. Default: [:]
 * @param verbose                    Boolean [OPTIONAL] Enable extra verbosity and logging. Default: false
 *
 * @return value returned by the closure executed in the stage.
 */
def conditionalStage(Map args, Closure stageBody)
{
    // TODO: Validate parameters
    Boolean verbose = args.containsKey("verbose") && args.verbose ? true : false
    Boolean dry_run = args.containsKey("dryRun")  && args.dryRun  ? true : false
    Boolean skip_stage = args.containsKey("stageCondition") && args.stageCondition ? true : false

    assert args.containsKey("stageName")
    String stageName = args.stageName

    // Shared argumengs for all callbacks
    Map args_shared  = args.containsKey("callbackSharedArgs") ? args.callbackSharedArgs : [:]

    println "\u276ESPIFI\u276F BEGIN conditionalStage(${stageName})"

    // Create output variable
    def output = null

    if(!dry_run && args.containsKey("callbackStagePre") && args.callbackStagePre instanceof Closure)
    {
        def args_cb_pre = args.containsKey("callbackStagePreArgs") ? args.callbackStagePreArgs : [:]
        args.callbackStagePre( args_cb_pre, args_shared )
    }

    stage(stageName)
    {
        if(verbose)
        {
            println "\u276ESPIFI\u276F Additional Verbose Logging"
        }

        // Stage is skipped
        if(skip_stage)
        {
            if(args.containsKey("callbackStageSkipped") && args.callbackStageSkipped instanceof Closure)
            {
                def args_cb_skip = args.containsKey("callbackStageSkippedArgs") ? args.callbackStageSkippedArgs : [:]
                args.callbackStageSkipped( args_cb_skip, args_shared )
            }
            else
            {
                println "\u276ESPIFI\u276F Stage ${stageName} was skipped due to condition failure"
            }
        }

        // Stage is NOT skipped
        else
        {
            // If we ARE doing a dry-run:
            if(dry_run)
            {
                if(args.containsKey("callbackDryRun") && args.callbackStageDryRun instanceof Closure)
                {
                    def args_cb_dry = args.containsKey("callbackStageDryRunArgs") ? args.callbackStageDryRunArgs : [:]
                    args.callbackStageDryRun( args_cb_dry, args_shared )
                }
                else
                {
                    println "\u276ESPIFI\u276F Stage ${stageName} is in dry-run mode"
                    sleep(5)
                }
            }

            // If we ARE NOT doing a dry-run:
            else
            {
                // Execute stage body
                output = stageBody()

                // Execute stageCompleted callback if one was provided
                if(args.containsKey("callbackStageCompleted") && args.callbackStageCompleted instanceof Closure)
                {
                    def args_cb_completed = args.containsKey("callbackStageCompletedArgs") ? args.callbackStageCompletedArgs : [:]
                    args.callbackStageCompleted( args_cb_completed, args_shared )
                }
                else
                {
                    println "\u276ESPIFI\u276F Stage ${stageName} completed"
                }
            }
        }
    } // stage


    if(!dry_run && args.containsKey("callbackStagePost") && args.callbackStagePost instanceof Closure)
    {
        def args_cb_post = args.containsKey("callbackStagePostArgs") ? args.callbackStagePostArgs : [:]
        args.callbackStagePost( args_cb_post, args_shared )
    }

    println "\u276ESPIFI\u276F END conditionalStage(${stageName})"
    return output
}
